db <- available.packages()
deps <- tools::package_dependencies("dygraphs", db = db)$dygraphs
install.packages(c(deps, "dygraphs"))
library(plyr)
library(zoo)
library(ggplot2)
library(gridExtra)
library(grid)
library(reshape2) #melt function
library(scales) #dollar f
averageByMonth <- function(byMonth){
priorYears <- subset(byMonth, year %in% (max(year)):(max(year)-2))
numdays <- days_in_month(max(byMonth$date))
numdays <- days_in_month(max(byMonth$date))
thisYear <- subset(byMonth, year %in% max(year), c("idsite","month","year"))
thisYear$avMonthlyUse <- mean(priorYears$usePerDay)
thisYear$avMonthlyCost <- mean(priorYears$costPerDay)
return(thisYear)
}
#takes subset of data set containing a single commodity at a single site
#Calculates cost/use / day. For each month, takes 3 year average of cost/use /day.  Averages averages for the last 12 months. Computes ratio to be index.
#Joins results with original dataframe
calcIndices <- function (jdf)
{
jdf <- jdf[order(jdf$date),]
#jdf$usePChange <- jdf$oUse/shift(jdf$oUse,n=12, type = "lag", fill = NA) - 1
#jdf$costPChange <- jdf$oCost/shift(jdf$oCost,n=12, type = "lag", fill = NA) - 1
#remove the na line caused by the shift
#jdf <- subset(jdf, !is.na(costPChange) & !is.na(usePChange))
jdf$numdays <- days_in_month(jdf$date)
jdf$costPerDay <- jdf$Cost/jdf$numdays
jdf$usePerDay <- jdf$Use/jdf$numdays
#split by month. Average prior 3 years and that becomes the index for the max year
res <- ddply(jdf, c("month"), averageByMonth)
aveUse <- mean(res$avMonthlyUse)
aveCost <- mean(res$avMonthlyCost)
#thisYear <- subset(jdf, as.Date(date) %in% seq(max(jdf$date), length = 12, by = "-1 months"))  #grab the last 12 months of data
#aveUse <- mean(thisYear$oUse)
#aveCost <- mean(thisYear$oCost)
res$costIndex <- res$avMonthlyCost/aveCost
res$useIndex <- res$avMonthlyUse/aveUse
#join the 3 year index averages back into the site data for the appropriate year/month. Set everything else to 1
jdf2 <- merge(x=jdf, y = res, by = c("idsite", "month","year"), all.x = TRUE)
jdf2 <- jdf2[order(jdf2$date),]
return(jdf2)
}
#----------------------------------------------------------Exploratory Analysis
#read in .csv of combined data
df <- read.csv("P:/Custom Analytics/BA Team/Rachel Stuff/CA comparison files/combinedIndexData5.csv", stringsAsFactors = FALSE)
#----------------------Data validation to be sure clients assigned to sites are actually correct
dim(df)
names(df)
# sites <- unique(data.frame(Client = df$Client, siteID = df$idsite))
# sites <- sites[sites$Client == "WorldMark",]
#
# sites <- head(sites, 999) #cannot insert more than 1000 at a time soooooo there
#
# entries <- paste0('(\'', sites$Client, '\',\'', sites$siteID,'\')')
# qryStr <- paste(entries, collapse=",")
#
# write(qryStr, file="newfile.txt")
#------------------Process
averageByMonth <- function(byMonth){
priorYears <- subset(byMonth, year %in% (max(year)):(max(year)-2))
numdays <- days_in_month(max(byMonth$date))
numdays <- days_in_month(max(byMonth$date))
thisYear <- subset(byMonth, year %in% max(year), c("idsite","month","year"))
thisYear$avMonthlyUse <- mean(priorYears$usePerDay)
thisYear$avMonthlyCost <- mean(priorYears$costPerDay)
return(thisYear)
}
priorYears
priorYears <- subset(byMonth, year %in% (max(year)):(max(year)-2))
?days_in_month
require(lubridate)
?days_in_month
dim(df)
names(df)
subdf <- df[,c("idsite","coMModity", "Month", "year", "Use", "costWtax", "BudgetCost", "BudgetUse","Scrubbed","Client")]
scrubbed <- subdf[subdf$Scrubbed == 1,]
unscrubbed <- subdf[subdf$Scrubbed == 0,]
head(scrubbed)
head(unscrubbed)
head(subdf)
tail(subdf)
View(head(scrubbed,5))
head(subdf)
head(df)
head(subdf)
View(head(subdf))
allJoin <- merge(x = scrubbed, y = unscrubbed, by = c("Client", "idsite","coMModity","Month","year"))
View(head(allJoin))
names(allJoin) <- c("client","idsite","commodity","month","year","sUse","sCost","sCostInd","sUseInd", "sflag","Use", "Cost","oCostInd","oUseInd","oflag")
allJoin <- allJoin[,c("client","idsite","commodity","month","year","oUseInd","sUseInd","oCostInd","sCostInd","Use","Cost")]
allJoin <- allJoin[!is.na(allJoin$idsite),]
allJoin$date <- as.Date(as.yearmon(paste(allJoin$month, allJoin$year," ")))
View(head(allJoin))
View(head(unique(allJoin$idsite)))
View(head(allJoin[allJoin$idsite==1068698,]))
View((allJoin[allJoin$idsite==1068698,]))
View((allJoin[allJoin$idsite==1068698 & allJoin$year == 2016,]))
View((allJoin[allJoin$idsite==1068698 & allJoin$year == 2017,]))
View((allJoin[allJoin$idsite==1068698 & allJoin$year == 2016,]))
View((allJoin[allJoin$idsite==1068698 & !is.na(allJoin$oUseInd),]))
allJoin <- merge(x = scrubbed, y = unscrubbed, by = c("Client", "idsite","coMModity","Month","year","Scrubbed"))
names(allJoin) <- c("client","idsite","commodity","month","year","sUse","sCost","sCostInd","sUseInd", "sflag","Use", "Cost","oCostInd","oUseInd","oflag", "Scrubbed")
head(allJoin)
allJoin <- merge(x = scrubbed, y = unscrubbed, by = c("Client", "idsite","coMModity","Month","year"))
head(addJoin)
head(allJoin)
withIndices <- ddply(allJoin, c("idsite","commodity"), calcIndices)
names(allJoin) <- c("client","idsite","commodity","month","year","sUse","sCost","sCostInd","sUseInd", "sflag","Use", "Cost","oCostInd","oUseInd","oflag")
allJoin <- allJoin[,c("client","idsite","commodity","month","year","oUseInd","sUseInd","oCostInd","sCostInd","Use","Cost")]
allJoin <- allJoin[!is.na(allJoin$idsite),]
withIndices <- ddply(allJoin, c("idsite","commodity"), calcIndices)
allJoin <- merge(x = scrubbed, y = unscrubbed, by = c("Client", "idsite","coMModity","Month","year"))
names(allJoin) <- c("client","idsite","commodity","month","year","sUse","sCost","sCostInd","sUseInd", "sflag","Use", "Cost","oCostInd","oUseInd","oflag")
allJoin <- allJoin[,c("client","idsite","commodity","month","year","oUseInd","sUseInd","oCostInd","sCostInd","Use","Cost")]
allJoin <- allJoin[!is.na(allJoin$idsite),]
allJoin$date <- as.Date(as.yearmon(paste(allJoin$month, allJoin$year," ")))
require(lubridate)
withIndices <- ddply(allJoin, c("idsite","commodity"), calcIndices)
head(subset(withIndices,!is.na(costIndex)))
View((withIndices[withIndices$idsite==1068698 & !is.na(withIndices$oUseInd),]))
last12 <- as.Date(as.yearmon(max(allJoin$date)) - 1, frac = 1)
allJoin <- allJoin[allJoin$date > last12, ]
allJoin$oCost <- allJoin$Cost * allJoin$oCostInd
allJoin$sCost <- allJoin$Cost * allJoin$sCostInd
allJoin$oUse <- allJoin$Use * allJoin$oUseInd
allJoin$sUse <- allJoin$Use * allJoin$sUseInd
View((allJoin[allJoin$idsite==1068698 & !is.na(allJoin$oUseInd),]))
options("scipen" = 10) #allows us to view results without the "e" notation
View((allJoin[allJoin$idsite==1068698 & !is.na(allJoin$oUseInd),]))
sum_comm <- function(x)
{
e <- subset(x,commodity =="Electric")
g <- subset(x,commodity =="Natural Gas")
eCostChng <- sum(e$sCost) - sum(e$oCost)
gCostChng <- sum(g$sCost) - sum(g$oCost)
totalBeforeCost <- sum(x$oCost)
totalAfterCost <- sum(x$sCost)
costPercChng <- totalAfterCost/totalBeforeCost - 1
eUseChng <- sum(e$sUse) - sum(e$oUse)
gUseChng <- sum(g$sUse) - sum(g$oUse)
totalBeforeUse <- sum(x$oUse)
totalAfterUse <- sum(x$sUse)
usePercChng <- totalAfterUse/totalBeforeUse - 1
res <- data.frame(eCostChng, gCostChng, totalBeforeCost,totalAfterCost, costPercChng, eUseChng,gUseChng, totalBeforeUse, totalAfterUse, usePercChng)
return(res)
}
res <- ddply(allJoin, c("client"), sum_comm)
head(res)
